"""
Unit tests for lean server response classes

Test that responses are properly converted from JSON into
Python classes and that new fields do not cause the parser
to crash.

When possible, tests should use ACTUAL LEAN OUTPUT under a
range of scenarios to ensure that all cases are covered.
(One way to generate output is to use the trio server with
debug_bytes=True.)
"""
import json

import lean_client.commands as cmds


class TestAllMessagesResponse:
    def test_no_messages(self):
        response_json = '{"msgs":[],"response":"all_messages"}'
        resp = cmds.Response.parse_response(response_json)

        assert isinstance(resp, cmds.AllMessagesResponse)
        assert resp.response == "all_messages"
        assert len(resp.msgs) == 0

    def test_multiple_messages(self):
        response_json = '{"msgs":[{"caption":"","file_name":"test3.lean","pos_col":7,"pos_line":2,"severity":"error","text":"unknown identifier \'foo\'"},{"caption":"","file_name":"test2.lean","pos_col":0,"pos_line":1,"severity":"warning","text":"declaration \'foo\' uses sorry"}],"response":"all_messages"}'
        resp = cmds.Response.parse_response(response_json)

        assert isinstance(resp, cmds.AllMessagesResponse)
        assert resp.response == "all_messages"
        assert len(resp.msgs) == 2

        assert resp.msgs[0].caption == ""
        assert resp.msgs[0].file_name == "test3.lean"
        assert resp.msgs[0].pos_col == 7
        assert resp.msgs[0].pos_line == 2
        assert resp.msgs[0].severity == cmds.Severity.error
        assert resp.msgs[0].text == "unknown identifier 'foo'"

        assert resp.msgs[1].severity == cmds.Severity.warning

    def test_extra_fields(self):
        """
        Should not crash if given extra fields where are added in later versions of Lean.
        """

        response_json = '{"_new_field_a":12345, "msgs":[{"_new_field_b":12345, "caption":"","file_name":"test3.lean","pos_col":7,"pos_line":2,"severity":"error","text":"unknown identifier \'foo\'","_new_field_a":12345},{"caption":"","file_name":"test2.lean","pos_col":0,"pos_line":1,"severity":"warning","text":"declaration \'foo\' uses sorry"}],"response":"all_messages"}'
        resp = cmds.Response.parse_response(response_json)

        assert isinstance(resp, cmds.AllMessagesResponse)
        assert resp.response == "all_messages"
        assert len(resp.msgs) == 2

        assert resp.msgs[0].caption == ""
        assert resp.msgs[0].file_name == "test3.lean"
        assert resp.msgs[0].pos_col == 7
        assert resp.msgs[0].pos_line == 2
        assert resp.msgs[0].severity == cmds.Severity.error
        assert resp.msgs[0].text == "unknown identifier 'foo'"

        assert resp.msgs[1].severity == cmds.Severity.warning


class TestCurrentTasksResponse:
    def test_no_tasks(self):
        response_json = '{"is_running":false,"response":"current_tasks","tasks":[]}'
        resp = cmds.Response.parse_response(response_json)

        assert isinstance(resp, cmds.CurrentTasksResponse)
        assert resp.is_running == False
        assert resp.response == "current_tasks"
        assert resp.tasks == []

    def test_extra_fields(self):
        """
        Should not crash if given extra fields where are added in later versions of Lean.
        """
        response_json = '{"_new_field_a":123,"is_running":false,"response":"current_tasks","tasks":[]}'
        resp = cmds.Response.parse_response(response_json)

        assert isinstance(resp, cmds.CurrentTasksResponse)
        assert resp.is_running == False
        assert resp.response == "current_tasks"
        assert resp.tasks == []

    def test_running_tasks(self):
        response_json = '{"is_running":true,"response":"current_tasks","tasks":[{"desc":"parsing at line 1","end_pos_col":70,"end_pos_line":1,"file_name":"test.lean","pos_col":0,"pos_line":1}]}'
        resp = cmds.Response.parse_response(response_json)

        assert isinstance(resp, cmds.CurrentTasksResponse)
        assert resp.is_running == True
        assert resp.response == "current_tasks"
        assert resp.tasks == [cmds.Task(desc='parsing at line 1', end_pos_col=70, end_pos_line=1, file_name='test.lean', pos_col=0, pos_line=1)]


class TestErrorResponse:
    def test_missing_file_error(self):
        response_json = '{"message":"file \'missing.lean\' not found in the LEAN_PATH","response":"error","seq_num":3}'
        resp = cmds.Response.parse_response(response_json)

        assert isinstance(resp, cmds.ErrorResponse)
        assert resp.message == "file \'missing.lean\' not found in the LEAN_PATH"
        assert resp.response == "error"
        assert resp.seq_num == 3

    def test_error_with_no_seq_num(self):
        response_json = '{"message":"key \'seq_num\' not found","response":"error"}'
        resp = cmds.Response.parse_response(response_json)

        assert isinstance(resp, cmds.ErrorResponse)
        assert resp.message == "key 'seq_num' not found"
        assert resp.response == "error"
        assert resp.seq_num == None

    def test_extra_fields(self):
        """
        Should not crash if given extra fields where are added in later versions of Lean.
        """
        response_json = '{"_new_field_a":123,"message":"key \'seq_num\' not found","response":"error"}'
        resp = cmds.Response.parse_response(response_json)

        assert isinstance(resp, cmds.ErrorResponse)
        assert resp.message == "key 'seq_num' not found"
        assert resp.response == "error"
        assert resp.seq_num == None


class TestCommandResponse:
    class CommandResponseExample:
        def __init__(self, response_json: str, response_type):
            self.response_json = response_json
            self.data = json.loads(response_json)
            self.command = response_type.command
            self.response_type = response_type
            self.ok_resp = None
            self.resp = None

        def add_fields(self, data):
            if isinstance(data, dict):
                data2 = {k: self.add_fields(d) for k, d in data.items()}
                data2['_extra_field'] = "Extra field value"
                return data2
            if isinstance(data, list):
                data2 = [self.add_fields(d) for d in data]
                return data2
            else:
                return data

        def parse_intermediate(self, add_extra_fields):
            if add_extra_fields:
                json_string = json.dumps(self.add_fields(self.data))
            else:
                json_string = self.response_json
            self.ok_resp = cmds.Response.parse_response(json_string)

        def parse_final(self):
            self.resp = self.ok_resp.to_command_response(self.command)

        def test_intermediate_representation(self):
            assert isinstance(self.ok_resp, cmds.OkResponse)
            assert self.ok_resp.response == self.data['response']
            assert self.ok_resp.seq_num == self.data['seq_num']

        def assert_data_and_object_match(self, data, object, ignore_keys, replacement_keys):
            print("Comparing:", object, "\nwith:   ", data)
            if isinstance(data, (int, float, str, bool)):
                assert data == object
            elif isinstance(data, list):
                assert isinstance(object, list)
                assert len(object) == len(data)
                for d, o in zip(data, object):
                    self.assert_data_and_object_match(d, o, ignore_keys, replacement_keys)
            elif isinstance(data, dict):
                for key, value in data.items():
                    if key in ignore_keys:
                        continue
                    if key in replacement_keys:
                        key = replacement_keys[key]
                    print(key, object)
                    self.assert_data_and_object_match(value, object.__dict__[key], ignore_keys, replacement_keys)

        def test_final_representation(self, ignore_keys=None, replacement_keys=None):
            assert isinstance(self.resp, self.response_type)
            assert self.resp.command == self.command
            assert self.resp.response == self.data['response']

            if ignore_keys is None:
                ignore_keys = []
            if replacement_keys is None:
                replacement_keys = {}
            self.assert_data_and_object_match(self.data, self.resp, ignore_keys=ignore_keys + ['response'], replacement_keys=replacement_keys)

    @staticmethod
    def run_tests(response_json: str, response_type, replacement_keys=None):
        """
        Attempt to parse the response_json string and test that all the desired fields are included and correctly parsed.
        It also checks that the parsing still works even if new extra fields are in the json.
        """
        example = TestCommandResponse.CommandResponseExample(
            response_json=response_json,
            response_type=response_type
        )

        # test parsing
        example.parse_intermediate(add_extra_fields=False)
        example.test_intermediate_representation()
        example.parse_final()
        example.test_final_representation(replacement_keys=replacement_keys)

        # test that still parses with extra fields
        example.parse_intermediate(add_extra_fields=False)
        example.test_intermediate_representation()
        example.parse_final()
        example.test_final_representation(replacement_keys=replacement_keys)

    class TestSyncResponse:
        def test_file_invalidated_response(self):
            TestCommandResponse.run_tests(
                response_json='{"message":"file invalidated","response":"ok","seq_num":2}',
                response_type=cmds.SyncResponse
            )

        def test_file_unchanged_response(self):
            TestCommandResponse.run_tests(
                response_json='{"message":"file unchanged","response":"ok","seq_num":3}',
                response_type=cmds.SyncResponse
            )

    class TestAllHoleCommandsResponse:
        def test_holes(self):
            TestCommandResponse.run_tests(
                response_json='{"holes":[{"end":{"column":21,"line":1},"file":"test2.lean","results":[{"description":"Infer type of the expression in the hole","name":"Infer"},{"description":"Show the current goal","name":"Show"},{"description":"Try to fill the hole using the given argument","name":"Use"}],"start":{"column":16,"line":1}}],"response":"ok","seq_num":6}',
                response_type=cmds.AllHoleCommandsResponse
            )

    class TestHoleCommandsResponse:
        def test_hole_not_found(self):
            TestCommandResponse.run_tests(
                response_json='{"message":"hole not found","response":"ok","seq_num":11}',
                response_type=cmds.HoleCommandsResponse
            )

        def test_holes(self):
            TestCommandResponse.run_tests(
                response_json='{"end":{"column":21,"line":1},"file":"test2.lean","response":"ok","results":[{"description":"Infer type of the expression in the hole","name":"Infer"},{"description":"Show the current goal","name":"Show"},{"description":"Try to fill the hole using the given argument","name":"Use"}],"seq_num":7,"start":{"column":16,"line":1}}',
                response_type=cmds.HoleCommandsResponse
            )

    class TestHoleResponse:
        def test_hole_not_found(self):
            TestCommandResponse.run_tests(
                response_json='{"message":"hole not found","response":"ok","seq_num":11}',
                response_type=cmds.HoleResponse
            )

        def test_hole_infer_action(self):
            TestCommandResponse.run_tests(
                response_json='{"message":"\xe2\x84\x95\\n","response":"ok","seq_num":8}',
                response_type=cmds.HoleResponse
            )

        def test_hole_use_action(self):
            TestCommandResponse.run_tests(
                response_json='{"replacements":{"alternatives":[{"code":"1","description":""}],"end":{"column":21,"line":1},"file":"test2.lean","start":{"column":16,"line":1}},"response":"ok","seq_num":10}',
                response_type=cmds.HoleResponse
            )

    class TestCompleteResponse:
        def test_completions_skip_false(self):
            TestCommandResponse.run_tests(
                response_json='{"completions":[{"source":{"column":8,"line":1},"text":"foobar","type":"1 = 1"},{"source":{"column":4,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/data/array/basic.lean","line":174},"text":"array.foldl","type":"array ?n ?\xce\xb1 \xe2\x86\x92 ?\xce\xb2 \xe2\x86\x92 (?\xce\xb1 \xe2\x86\x92 ?\xce\xb2 \xe2\x86\x92 ?\xce\xb2) \xe2\x86\x92 ?\xce\xb2"},{"doc":"Map each element of the given array with an index argument.","source":{"column":4,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/data/array/basic.lean","line":166},"text":"array.foreach","type":"array ?n ?\xce\xb1 \xe2\x86\x92 (fin ?n \xe2\x86\x92 ?\xce\xb1 \xe2\x86\x92 ?\xce\xb2) \xe2\x86\x92 array ?n ?\xce\xb2"},{"source":{"column":14,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/data/array/basic.lean","line":234},"text":"array.has_to_format","type":"has_to_format (array ?n ?\xce\xb1)"},{"source":{"column":14,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/data/array/basic.lean","line":237},"text":"array.has_to_tactic_format","type":"has_to_tactic_format (array ?n ?\xce\xb1)"},{"source":{"column":4,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/data/array/basic.lean","line":183},"text":"array.rev_foldl","type":"array ?n ?\xce\xb1 \xe2\x86\x92 ?\xce\xb2 \xe2\x86\x92 (?\xce\xb1 \xe2\x86\x92 ?\xce\xb2 \xe2\x86\x92 ?\xce\xb2) \xe2\x86\x92 ?\xce\xb2"},{"source":{"column":14,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/data/bool/lemmas.lean","line":89},"text":"band_eq_false_eq_eq_ff_or_eq_ff","type":"\xe2\x88\x80 (a b : bool), a && b = ff = (a = ff \xe2\x88\xa8 b = ff)"},{"doc":" Auxiliary annotation for binders (Lambda and Pi).\\n    This information is only used for elaboration.\\n      The difference between `{}` and `\xe2\xa6\x83\xe2\xa6\x84` is how implicit arguments are treated that are *not* followed by explicit arguments.\\n  `{}` arguments are applied eagerly, while `\xe2\xa6\x83\xe2\xa6\x84` arguments are left partially applied:\\n```lean\\ndef foo {x : \xe2\x84\x95} : \xe2\x84\x95 := x\\ndef bar \xe2\xa6\x83x : \xe2\x84\x95\xe2\xa6\x84 : \xe2\x84\x95 := x\\n#check foo -- foo : \xe2\x84\x95\\n#check bar -- bar : \xce\xa0 \xe2\xa6\x83x : \xe2\x84\x95\xe2\xa6\x84, \xe2\x84\x95\\n```","source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/expr.lean","line":35},"text":"binder_info","type":"Type"},{"source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/expr.lean","line":35},"text":"binder_info.aux_decl","type":"binder_info"},{"source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/expr.lean","line":35},"text":"binder_info.aux_decl.inj","type":"binder_info.aux_decl = binder_info.aux_decl \xe2\x86\x92 true"},{"source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/expr.lean","line":35},"text":"binder_info.aux_decl.inj_arrow","type":"binder_info.aux_decl = binder_info.aux_decl \xe2\x86\x92 \xce\xa0 \xe2\xa6\x83P : Sort l\xe2\xa6\x84, (true \xe2\x86\x92 P) \xe2\x86\x92 P"},{"source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/expr.lean","line":35},"text":"binder_info.aux_decl.sizeof_spec","type":"binder_info.sizeof binder_info.aux_decl = 1"},{"source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/expr.lean","line":35},"text":"binder_info.cases_on","type":"\xce\xa0 (n : binder_info), ?C binder_info.default \xe2\x86\x92 ?C binder_info.implicit \xe2\x86\x92 ?C binder_info.strict_implicit \xe2\x86\x92 ?C binder_info.inst_implicit \xe2\x86\x92 ?C binder_info.aux_decl \xe2\x86\x92 ?C n"},{"source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/expr.lean","line":35},"text":"binder_info.default","type":"binder_info"},{"source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/expr.lean","line":35},"text":"binder_info.default.inj","type":"binder_info.default = binder_info.default \xe2\x86\x92 true"},{"source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/expr.lean","line":35},"text":"binder_info.default.inj_arrow","type":"binder_info.default = binder_info.default \xe2\x86\x92 \xce\xa0 \xe2\xa6\x83P : Sort l\xe2\xa6\x84, (true \xe2\x86\x92 P) \xe2\x86\x92 P"},{"source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/expr.lean","line":35},"text":"binder_info.default.sizeof_spec","type":"binder_info.sizeof binder_info.default = 1"},{"source":{"column":9,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/expr.lean","line":48},"text":"binder_info.has_repr","type":"has_repr binder_info"},{"source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/expr.lean","line":35},"text":"binder_info.has_sizeof_inst","type":"has_sizeof binder_info"},{"source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/expr.lean","line":35},"text":"binder_info.implicit","type":"binder_info"},{"source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/expr.lean","line":35},"text":"binder_info.implicit.inj","type":"binder_info.implicit = binder_info.implicit \xe2\x86\x92 true"},{"source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/expr.lean","line":35},"text":"binder_info.implicit.inj_arrow","type":"binder_info.implicit = binder_info.implicit \xe2\x86\x92 \xce\xa0 \xe2\xa6\x83P : Sort l\xe2\xa6\x84, (true \xe2\x86\x92 P) \xe2\x86\x92 P"},{"source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/expr.lean","line":35},"text":"binder_info.implicit.sizeof_spec","type":"binder_info.sizeof binder_info.implicit = 1"},{"source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/expr.lean","line":35},"text":"binder_info.inst_implicit","type":"binder_info"},{"source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/expr.lean","line":35},"text":"binder_info.inst_implicit.inj","type":"binder_info.inst_implicit = binder_info.inst_implicit \xe2\x86\x92 true"},{"source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/expr.lean","line":35},"text":"binder_info.inst_implicit.inj_arrow","type":"binder_info.inst_implicit = binder_info.inst_implicit \xe2\x86\x92 \xce\xa0 \xe2\xa6\x83P : Sort l\xe2\xa6\x84, (true \xe2\x86\x92 P) \xe2\x86\x92 P"},{"source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/expr.lean","line":35},"text":"binder_info.inst_implicit.sizeof_spec","type":"binder_info.sizeof binder_info.inst_implicit = 1"},{"source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/expr.lean","line":35},"text":"binder_info.no_confusion","type":"?v1 = ?v2 \xe2\x86\x92 binder_info.no_confusion_type ?P ?v1 ?v2"},{"source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/expr.lean","line":35},"text":"binder_info.no_confusion_type","type":"Sort l \xe2\x86\x92 binder_info \xe2\x86\x92 binder_info \xe2\x86\x92 Sort l"},{"source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/expr.lean","line":35},"text":"binder_info.rec","type":"?C binder_info.default \xe2\x86\x92 ?C binder_info.implicit \xe2\x86\x92 ?C binder_info.strict_implicit \xe2\x86\x92 ?C binder_info.inst_implicit \xe2\x86\x92 ?C binder_info.aux_decl \xe2\x86\x92 \xce\xa0 (n : binder_info), ?C n"},{"source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/expr.lean","line":35},"text":"binder_info.rec_on","type":"\xce\xa0 (n : binder_info), ?C binder_info.default \xe2\x86\x92 ?C binder_info.implicit \xe2\x86\x92 ?C binder_info.strict_implicit \xe2\x86\x92 ?C binder_info.inst_implicit \xe2\x86\x92 ?C binder_info.aux_decl \xe2\x86\x92 ?C n"},{"source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/expr.lean","line":35},"text":"binder_info.sizeof","type":"binder_info \xe2\x86\x92 \xe2\x84\x95"},{"source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/expr.lean","line":35},"text":"binder_info.strict_implicit","type":"binder_info"},{"source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/expr.lean","line":35},"text":"binder_info.strict_implicit.inj","type":"binder_info.strict_implicit = binder_info.strict_implicit \xe2\x86\x92 true"},{"source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/expr.lean","line":35},"text":"binder_info.strict_implicit.inj_arrow","type":"binder_info.strict_implicit = binder_info.strict_implicit \xe2\x86\x92 \xce\xa0 \xe2\xa6\x83P : Sort l\xe2\xa6\x84, (true \xe2\x86\x92 P) \xe2\x86\x92 P"},{"source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/expr.lean","line":35},"text":"binder_info.strict_implicit.sizeof_spec","type":"binder_info.sizeof binder_info.strict_implicit = 1"},{"source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/core.lean","line":265},"text":"bool","type":"Type"},{"source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/core.lean","line":265},"text":"bool.cases_on","type":"\xce\xa0 (n : bool), ?C ff \xe2\x86\x92 ?C tt \xe2\x86\x92 ?C n"},{"source":{"column":9,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/logic.lean","line":744},"text":"bool.decidable_eq","type":"decidable_eq bool"},{"source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/core.lean","line":265},"text":"ff","type":"bool"},{"source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/core.lean","line":265},"text":"bool.ff.inj","type":"ff = ff \xe2\x86\x92 true"},{"source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/core.lean","line":265},"text":"bool.ff.inj_arrow","type":"ff = ff \xe2\x86\x92 \xce\xa0 \xe2\xa6\x83P : Sort l\xe2\xa6\x84, (true \xe2\x86\x92 P) \xe2\x86\x92 P"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/logic.lean","line":737},"text":"bool.ff_ne_tt","type":"ff = tt \xe2\x86\x92 false"},{"source":{"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/derive.lean"},"text":"bool.has_reflect","type":"has_reflect bool"},{"source":{"column":9,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/data/repr.lean","line":37},"text":"bool.has_repr","type":"has_repr bool"},{"source":{"column":9,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/core.lean","line":522},"text":"bool.has_sizeof","type":"has_sizeof bool"},{"source":{"column":14,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/format.lean","line":91},"text":"bool.has_to_format","type":"has_to_format bool"},{"source":{"column":9,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/data/to_string.lean","line":28},"text":"bool.has_to_string","type":"has_to_string bool"},{"source":{"column":9,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/logic.lean","line":784},"text":"bool.inhabited","type":"inhabited bool"},{"source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/core.lean","line":265},"text":"bool.no_confusion","type":"?v1 = ?v2 \xe2\x86\x92 bool.no_confusion_type ?P ?v1 ?v2"},{"source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/core.lean","line":265},"text":"bool.no_confusion_type","type":"Sort l \xe2\x86\x92 bool \xe2\x86\x92 bool \xe2\x86\x92 Sort l"},{"source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/core.lean","line":265},"text":"bool.rec","type":"?C ff \xe2\x86\x92 ?C tt \xe2\x86\x92 \xce\xa0 (n : bool), ?C n"},{"source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/core.lean","line":265},"text":"bool.rec_on","type":"\xce\xa0 (n : bool), ?C ff \xe2\x86\x92 ?C tt \xe2\x86\x92 ?C n"},{"source":{"column":14,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/core.lean","line":519},"text":"bool.sizeof","type":"bool \xe2\x86\x92 \xe2\x84\x95"},{"source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/core.lean","line":265},"text":"tt","type":"bool"},{"source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/core.lean","line":265},"text":"bool.tt.inj","type":"tt = tt \xe2\x86\x92 true"},{"source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/core.lean","line":265},"text":"bool.tt.inj_arrow","type":"tt = tt \xe2\x86\x92 \xce\xa0 \xe2\xa6\x83P : Sort l\xe2\xa6\x84, (true \xe2\x86\x92 P) \xe2\x86\x92 P"},{"source":{"column":8,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/data/bool/lemmas.lean","line":124},"text":"bool_eq_false","type":"\xc2\xac\xe2\x86\xa5?b \xe2\x86\x92 ?b = ff"},{"source":{"column":8,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/data/bool/lemmas.lean","line":122},"text":"bool_iff_false","type":"\xc2\xac\xe2\x86\xa5?b \xe2\x86\x94 ?b = ff"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/logic.lean","line":93},"text":"cast_proof_irrel","type":"\xe2\x88\x80 (h\xe2\x82\x81 h\xe2\x82\x82 : ?\xce\xb1 = ?\xce\xb2) (a : ?\xce\xb1), cast h\xe2\x82\x81 a = cast h\xe2\x82\x82 a"},{"source":{"column":14,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/smt/congruence_closure.lean","line":40},"text":"cc_state.eqv_proof","type":"cc_state \xe2\x86\x92 expr \xe2\x86\x92 expr \xe2\x86\x92 tactic expr"},{"source":{"column":9,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/smt/congruence_closure.lean","line":83},"text":"cc_state.fold_eqc","type":"cc_state \xe2\x86\x92 expr \xe2\x86\x92 ?\xce\xb1 \xe2\x86\x92 (?\xce\xb1 \xe2\x86\x92 expr \xe2\x86\x92 ?\xce\xb1) \xe2\x86\x92 ?\xce\xb1"},{"source":{"column":9,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/smt/congruence_closure.lean","line":76},"text":"cc_state.fold_eqc_core","type":"cc_state \xe2\x86\x92 (?\xce\xb1 \xe2\x86\x92 expr \xe2\x86\x92 ?\xce\xb1) \xe2\x86\x92 expr \xe2\x86\x92 expr \xe2\x86\x92 ?\xce\xb1 \xe2\x86\x92 ?\xce\xb1"},{"source":{"column":14,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/smt/congruence_closure.lean","line":59},"text":"cc_state.has_to_tactic_format","type":"has_to_tactic_format cc_state"},{"source":{"column":14,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/smt/congruence_closure.lean","line":33},"text":"cc_state.is_cg_root","type":"cc_state \xe2\x86\x92 expr \xe2\x86\x92 bool"},{"source":{"column":9,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/smt/congruence_closure.lean","line":86},"text":"cc_state.mfold_eqc","type":"cc_state \xe2\x86\x92 expr \xe2\x86\x92 ?\xce\xb1 \xe2\x86\x92 (?\xce\xb1 \xe2\x86\x92 expr \xe2\x86\x92 ?m ?\xce\xb1) \xe2\x86\x92 ?m ?\xce\xb1"},{"doc":"`proof_for cc e` constructs a proof for e if it is equivalent to true in cc_state","source":{"column":14,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/smt/congruence_closure.lean","line":43},"text":"cc_state.proof_for","type":"cc_state \xe2\x86\x92 expr \xe2\x86\x92 tactic expr"},{"doc":"If the given state is inconsistent, return a proof for false. Otherwise fail.","source":{"column":14,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/smt/congruence_closure.lean","line":47},"text":"cc_state.proof_for_false","type":"cc_state \xe2\x86\x92 tactic expr"},{"doc":"`refutation_for cc e` constructs a proof for `not e` if it is equivalent to false in cc_state","source":{"column":14,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/smt/congruence_closure.lean","line":45},"text":"cc_state.refutation_for","type":"cc_state \xe2\x86\x92 expr \xe2\x86\x92 tactic expr"},{"source":{"column":14,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/smt/congruence_closure.lean","line":29},"text":"cc_state.root","type":"cc_state \xe2\x86\x92 expr \xe2\x86\x92 expr"},{"source":{"column":9,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/smt/congruence_closure.lean","line":56},"text":"cc_state.roots","type":"cc_state \xe2\x86\x92 list expr"},{"source":{"column":14,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/smt/congruence_closure.lean","line":28},"text":"cc_state.roots_core","type":"cc_state \xe2\x86\x92 bool \xe2\x86\x92 list expr"},{"source":{"column":14,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/format.lean","line":106},"text":"char.has_to_format","type":"has_to_format char"},{"source":{"column":9,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/coe.lean","line":147},"text":"coe_bool_to_Prop","type":"has_coe bool Prop"},{"source":{"column":22,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/coe.lean","line":155},"text":"coe_sort_bool","type":"has_coe_to_sort bool"},{"source":{"column":18,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/congr_lemma.lean","line":29},"text":"congr_arg_kind.has_to_format","type":"has_to_format congr_arg_kind"},{"source":{"column":15,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/congr_lemma.lean","line":37},"text":"congr_lemma.proof","type":"congr_lemma \xe2\x86\x92 expr"},{"source":{"column":9,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/converter/interactive.lean","line":93},"text":"conv.interactive.for","type":"interactive.parse (lean.parser.pexpr std.prec.max) \xe2\x86\x92 interactive.parse (interactive.types.list_of lean.parser.small_nat) \xe2\x86\x92 conv.interactive.itactic \xe2\x86\x92 conv unit"},{"source":{"column":9,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/converter/interactive.lean","line":12},"text":"conv.save_info","type":"pos \xe2\x86\x92 conv unit"},{"source":{"column":4,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/data/array/basic.lean","line":50},"text":"d_array.foldl","type":"d_array ?n ?\xce\xb1 \xe2\x86\x92 ?\xce\xb2 \xe2\x86\x92 (\xce\xa0 (i : fin ?n), ?\xce\xb1 i \xe2\x86\x92 ?\xce\xb2 \xe2\x86\x92 ?\xce\xb2) \xe2\x86\x92 ?\xce\xb2"},{"doc":"Map the array. Has builtin VM implementation.","source":{"column":4,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/data/array/basic.lean","line":40},"text":"d_array.foreach","type":"d_array ?n ?\xce\xb1 \xe2\x86\x92 (\xce\xa0 (i : fin ?n), ?\xce\xb1 i \xe2\x86\x92 ?\xce\xb1\' i) \xe2\x86\x92 d_array ?n ?\xce\xb1\'"},{"source":{"column":14,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/format.lean","line":94},"text":"decidable.has_to_format","type":"has_to_format (decidable ?p)"},{"source":{"column":8,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/logic.lean","line":643},"text":"decidable.not_and_iff_or_not","type":"\xe2\x88\x80 (p q : Prop) [d\xe2\x82\x81 : decidable p] [d\xe2\x82\x82 : decidable q], \xc2\xac(p \xe2\x88\xa7 q) \xe2\x86\x94 \xc2\xacp \xe2\x88\xa8 \xc2\xacq"},{"source":{"column":4,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/logic.lean","line":592},"text":"to_bool","type":"\xce\xa0 (p : Prop) [h : decidable p], bool"},{"source":{"column":4,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/logic.lean","line":750},"text":"decidable_eq_of_bool_pred","type":"is_dec_eq ?p \xe2\x86\x92 is_dec_refl ?p \xe2\x86\x92 decidable_eq ?\xce\xb1"},{"doc":"Fold over declarations in the environment.","source":{"column":14,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/environment.lean","line":147},"text":"environment.fold","type":"environment \xe2\x86\x92 ?\xce\xb1 \xe2\x86\x92 (declaration \xe2\x86\x92 ?\xce\xb1 \xe2\x86\x92 ?\xce\xb1) \xe2\x86\x92 ?\xce\xb1"},{"doc":"Creates an environment containing the module `id` until `decl_name` including dependencies.\\n\\n**ONLY USE THIS FUNCTION IN (CI) SCRIPTS!**","source":{"column":9,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/module_info.lean","line":112},"text":"environment.for_decl_of_imported_module","type":"module_info.module_id \xe2\x86\x92 name \xe2\x86\x92 environment"},{"doc":"Creates an environment containing the module `name` until declaration `decl_name`\\nincluding dependencies.\\n\\n**ONLY USE THIS FUNCTION IN (CI) SCRIPTS!**","source":{"column":9,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/module_info.lean","line":129},"text":"environment.for_decl_of_imported_module_name","type":"module_info.module_name \xe2\x86\x92 name \xe2\x86\x92 opt_param string \\"\\" \xe2\x86\x92 environment"},{"doc":"Creates an environment containing the module `id` including dependencies.\\n\\n**ONLY USE THIS FUNCTION IN (CI) SCRIPTS!**\\n\\nThe environment `from_imported_module \\".../data/dlist.lean\\"` is roughly equivalent to\\nthe environment at the end of a file containing just `import data.dlist`.","source":{"column":9,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/module_info.lean","line":104},"text":"environment.from_imported_module","type":"module_info.module_id \xe2\x86\x92 environment"},{"doc":"Creates an environment containing the module `name` including dependencies.\\n\\n**ONLY USE THIS FUNCTION IN (CI) SCRIPTS!**","source":{"column":9,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/module_info.lean","line":120},"text":"environment.from_imported_module_name","type":"module_info.module_name \xe2\x86\x92 opt_param string \\"\\" \xe2\x86\x92 environment"},{"doc":"Consider a type `\xcf\x88` which is an inductive datatype using a single constructor `mk (a : \xce\xb1) (b : \xce\xb2) : \xcf\x88`.\\nLean will automatically make two projection functions `a : \xcf\x88 \xe2\x86\x92 \xce\xb1`, `b : \xcf\x88 \xe2\x86\x92 \xce\xb2`.\\nLean tags these declarations as __projections__.\\nThis helps the simplifier / rewriter not have to expand projectors.\\nEg `a (mk x y)` will automatically reduce to `x`.\\nIf you `extend` a structure, all of the projections on the parent will also be created for the child.\\nProjections are also treated differently in the VM for efficiency.\\n\\nNote that projections have nothing to do with the dot `mylist.map` syntax.\\n\\nYou can find out if a declaration is a projection using `environment.is_projection` which returns `projection_info`.\\n\\nData for a projection declaration:\\n- `cname`    is the name of the constructor associated with the projection.\\n- `nparams`  is the number of constructor parameters. Eg `and.intro` has two type parameters.\\n- `idx`      is the parameter being projected by this projection.\\n- `is_class` is tt iff this is a typeclass projection.\\n\\n### Examples:\\n\\n- `and.right` is a projection with ``{cname := `and.intro, nparams := 2, idx := 1, is_class := ff}``\\n- `ordered_ring.neg` is a projection with ``{cname := `ordered_ring.mk, nparams := 1, idx := 5, is_class := tt}``.","source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/environment.lean","line":39},"text":"environment.projection_info","type":"Type"},{"source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/environment.lean","line":39},"text":"environment.projection_info.cases_on","type":"\xce\xa0 (n : environment.projection_info), (\xce\xa0 (cname : name) (nparams idx : \xe2\x84\x95) (is_class : bool), ?C {cname := cname, nparams := nparams, idx := idx, is_class := is_class}) \xe2\x86\x92 ?C n"},{"source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/environment.lean","line":39},"text":"environment.projection_info.cname","type":"environment.projection_info \xe2\x86\x92 name"},{"source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/environment.lean","line":39},"text":"environment.projection_info.has_sizeof_inst","type":"has_sizeof environment.projection_info"},{"source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/environment.lean","line":39},"text":"environment.projection_info.idx","type":"environment.projection_info \xe2\x86\x92 \xe2\x84\x95"},{"source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/environment.lean","line":39},"text":"environment.projection_info.is_class","type":"environment.projection_info \xe2\x86\x92 bool"},{"source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/environment.lean","line":39},"text":"environment.projection_info.mk","type":"name \xe2\x86\x92 \xe2\x84\x95 \xe2\x86\x92 \xe2\x84\x95 \xe2\x86\x92 bool \xe2\x86\x92 environment.projection_info"},{"source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/environment.lean","line":39},"text":"environment.projection_info.mk.inj","type":"{cname := ?cname, nparams := ?nparams, idx := ?idx, is_class := ?is_class} = {cname := ?cname, nparams := ?nparams, idx := ?idx, is_class := ?is_class} \xe2\x86\x92 ?cname = ?cname \xe2\x88\xa7 ?nparams = ?nparams \xe2\x88\xa7 ?idx = ?idx \xe2\x88\xa7 ?is_class = ?is_class"},{"source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/environment.lean","line":39},"text":"environment.projection_info.mk.inj_arrow","type":"{cname := ?cname, nparams := ?nparams, idx := ?idx, is_class := ?is_class} = {cname := ?cname, nparams := ?nparams, idx := ?idx, is_class := ?is_class} \xe2\x86\x92 \xce\xa0 \xe2\xa6\x83P : Sort l\xe2\xa6\x84, (?cname = ?cname \xe2\x86\x92 ?nparams = ?nparams \xe2\x86\x92 ?idx = ?idx \xe2\x86\x92 ?is_class = ?is_class \xe2\x86\x92 P) \xe2\x86\x92 P"},{"source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/environment.lean","line":39},"text":"environment.projection_info.mk.sizeof_spec","type":"\xe2\x88\x80 (cname : name) (nparams idx : \xe2\x84\x95) (is_class : bool), environment.projection_info.sizeof {cname := cname, nparams := nparams, idx := idx, is_class := is_class} = 1 + sizeof cname + sizeof nparams + sizeof idx + sizeof is_class"}],"prefix":"foo","response":"ok","seq_num":17}',
                response_type=cmds.CompleteResponse,
                replacement_keys={'type': 'type_'}
            )

        def test_completions_skip_true(self):
            TestCommandResponse.run_tests(
                response_json='{"prefix":"foo","response":"ok","seq_num":18}',
                response_type=cmds.CompleteResponse
            )

        def test_no_completions(self):
            TestCommandResponse.run_tests(
                response_json='{"response":"ok","seq_num":19}',
                response_type=cmds.CompleteResponse
            )

    class TestInfoResponse:
        def test_empty(self):
            TestCommandResponse.run_tests(
                response_json='{"response":"ok","seq_num":24}',
                response_type=cmds.InfoResponse
            )

        def test_state(self):
            TestCommandResponse.run_tests(
                response_json='{"record":{"state":"p q : Prop,\\na : p,\\nb : q\\n⊢ p ∧ q ∧ p"},"response":"ok","seq_num":4}',
                response_type=cmds.InfoResponse
            )

        def test_doc(self):
            TestCommandResponse.run_tests(
                response_json='{"record":{"doc":" Pi or elet introduction. \\nGiven the tactic state `⊢ Π x : α, Y`, ``intro `hello`` will produce the state `hello : α ⊢ Y[x/hello]`.\\nReturns the new local constant. Similarly for `elet` expressions. \\nIf the target is not a Pi or elet it will try to put it in WHNF.","full-id":"tactic.intro","state":"a b c : ℕ\\n⊢ a = b → c = b → a = c","type":"name → tactic expr"},"response":"ok","seq_num":6}',
                response_type=cmds.InfoResponse,
                replacement_keys={'full-id': 'full_id', "type": "type_"}
            )

        def test_full_id_and_type(self):
            TestCommandResponse.run_tests(
                response_json='{"record":{"full-id":"n","type":"ℕ"},"response":"ok","seq_num":2}',
                response_type=cmds.InfoResponse,
                replacement_keys={'full-id': 'full_id', "type": "type_"}
            )

        def test_param_stuff(self):
            TestCommandResponse.run_tests(
                response_json='{"record":{"doc":"An abbreviation for `rewrite`.","source":{"column":10,"file":"test.lean","line":186},"state":"no goals","tactic_param_idx":0,"tactic_params":["([ (←? expr), ... ] | ←? expr)","(at (* | (⊢ | id)*))?","tactic.rewrite_cfg?"],"text":"rw","type":"interactive.parse tactic.interactive.rw_rules → interactive.parse interactive.types.location → opt_param tactic.rewrite_cfg {to_apply_cfg := {md := reducible, approx := tt, new_goals := tactic.new_goals.non_dep_first, instances := tt, auto_param := tt, opt_param := tt, unify := tt}, symm := ff, occs := occurrences.all} → tactic unit"},"response":"ok","seq_num":8}',
                response_type=cmds.InfoResponse,
                replacement_keys={'full-id': 'full_id', "type": "type_"}
            )

        def test_text_and_source(self):
            TestCommandResponse.run_tests(
                response_json='{"record":{"source":{"column":10,"file":"test.lean","line":186},"state":"Custom state: 2\\n2 goals\\np q : Prop,\\na : p,\\na_1 : q\\n⊢ p\\n\\np q : Prop,\\na : p,\\na_1 : q\\n⊢ q","tactic_params":[],"text":"assumption","type":"mytac unit"},"response":"ok","seq_num":66}',
                response_type=cmds.InfoResponse,
                replacement_keys = {'full-id': 'full_id', "type": "type_"}
            )


    class TestSearchResponse:
        def test_searches_found(self):
            TestCommandResponse.run_tests(
                response_json='{"response":"ok","results":[{"source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/core.lean","line":186},"text":"and","type":"Prop \xe2\x86\x92 Prop \xe2\x86\x92 Prop"},{"source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/wf.lean","line":11},"text":"acc","type":"(?\xce\xb1 \xe2\x86\x92 ?\xce\xb1 \xe2\x86\x92 Prop) \xe2\x86\x92 ?\xce\xb1 \xe2\x86\x92 Prop"},{"source":{"column":11,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/functions.lean","line":13},"text":"abs","type":"?\xce\xb1 \xe2\x86\x92 ?\xce\xb1"},{"doc":"A non-dependent array (see `d_array`). Implemented in the VM as a persistent array.","source":{"column":4,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/data/array/basic.lean","line":138},"text":"array","type":"\xe2\x84\x95 \xe2\x86\x92 Type u \xe2\x86\x92 Type u"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/classes.lean","line":148},"text":"asymm","type":"?r ?a ?b \xe2\x86\x92 \xc2\xac?r ?b ?a"},{"doc":"We can\'t have `a` and `\xc2\xaca`, that would be absurd!","source":{"column":14,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/logic.lean","line":29},"text":"absurd","type":"?a \xe2\x86\x92 \xc2\xac?a \xe2\x86\x92 ?b"},{"source":{"column":14,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/category/alternative.lean","line":27},"text":"assert","type":"\xce\xa0 (p : Prop) [_inst_3 : decidable p], ?f (inhabited p)"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/core.lean","line":333},"text":"append","type":"?\xce\xb1 \xe2\x86\x92 ?\xce\xb1 \xe2\x86\x92 ?\xce\xb1"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/functions.lean","line":472},"text":"abs_div","type":"\xe2\x88\x80 (a b : ?\xce\xb1), abs (a / b) = abs a / abs b"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/core.lean","line":334},"text":"andthen","type":"?\xce\xb1 \xe2\x86\x92 ?\xce\xb2 \xe2\x86\x92 ?\xcf\x83"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/ordered_group.lean","line":95},"text":"add_pos","type":"0 < ?a \xe2\x86\x92 0 < ?b \xe2\x86\x92 0 < ?a + ?b"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/ordered_group.lean","line":107},"text":"add_neg","type":"?a < 0 \xe2\x86\x92 ?b < 0 \xe2\x86\x92 ?a + ?b < 0"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/group.lean","line":370},"text":"add_sub","type":"\xe2\x88\x80 (a b c : ?\xce\xb1), a + (b - c) = a + b - c"},{"source":{"column":4,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/ring.lean","line":31},"text":"add_mul","type":"\xe2\x88\x80 (a b c : ?\xce\xb1), (a + b) * c = a * c + b * c"},{"source":{"column":4,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/logic.lean","line":967},"text":"as_true","type":"\xce\xa0 (c : Prop) [_inst_1 : decidable c], Prop"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/functions.lean","line":244},"text":"abs_abs","type":"\xe2\x88\x80 (a : ?\xce\xb1), abs (abs a) = abs a"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/functions.lean","line":374},"text":"abs_mul","type":"\xe2\x88\x80 (a b : ?\xce\xb1), abs (a * b) = abs a * abs b"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/functions.lean","line":209},"text":"abs_neg","type":"\xe2\x88\x80 (a : ?\xce\xb1), abs (-a) = abs a"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/functions.lean","line":218},"text":"abs_sub","type":"\xe2\x88\x80 (a b : ?\xce\xb1), abs (a - b) = abs (b - a)"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/logic.lean","line":385},"text":"and_comm","type":"\xe2\x88\x80 (a b : Prop), a \xe2\x88\xa7 b \xe2\x86\x94 b \xe2\x88\xa7 a"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/classes.lean","line":145},"text":"antisymm","type":"?r ?a ?b \xe2\x86\x92 ?r ?b ?a \xe2\x86\x92 ?a = ?b"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/functions.lean","line":206},"text":"abs_zero","type":"abs 0 = 0"},{"source":{"column":8,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/group.lean","line":226},"text":"add_zero","type":"\xe2\x88\x80 (a : ?\xce\xb1), a + 0 = a"},{"source":{"column":14,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/logic.lean","line":403},"text":"and_true","type":"\xe2\x88\x80 (a : Prop), a \xe2\x88\xa7 true \xe2\x86\x94 a"},{"source":{"column":14,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/logic.lean","line":421},"text":"and_self","type":"\xe2\x88\x80 (a : Prop), a \xe2\x88\xa7 a \xe2\x86\x94 a"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/classes.lean","line":176},"text":"asymm_of","type":"\xe2\x88\x80 (r : ?\xce\xb1 \xe2\x86\x92 ?\xce\xb1 \xe2\x86\x92 Prop) [_inst_1 : is_asymm ?\xce\xb1 r] {a b : ?\xce\xb1}, r a b \xe2\x86\x92 \xc2\xacr b a"},{"source":{"column":4,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/logic.lean","line":970},"text":"as_false","type":"\xce\xa0 (c : Prop) [_inst_1 : decidable c], Prop"},{"source":{"column":8,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/group.lean","line":226},"text":"add_comm","type":"\xe2\x88\x80 (a b : ?\xce\xb1), a + b = b + a"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/group.lean","line":203},"text":"add_group","type":"Type u \xe2\x86\x92 Type u"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/logic.lean","line":392},"text":"and_assoc","type":"\xe2\x88\x80 (a b : Prop), (a \xe2\x88\xa7 b) \xe2\x88\xa7 ?c \xe2\x86\x94 a \xe2\x88\xa7 b \xe2\x88\xa7 ?c"},{"source":{"column":15,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/logic.lean","line":374},"text":"and_congr","type":"(?a \xe2\x86\x94 ?c) \xe2\x86\x92 (?b \xe2\x86\x94 ?d) \xe2\x86\x92 (?a \xe2\x88\xa7 ?b \xe2\x86\x94 ?c \xe2\x88\xa7 ?d)"},{"source":{"column":27,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/logic.lean","line":775},"text":"arbitrary","type":"\xce\xa0 (\xce\xb1 : Sort u) [_inst_1 : inhabited \xce\xb1], \xce\xb1"},{"source":{"column":14,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/logic.lean","line":409},"text":"and_false","type":"\xe2\x88\x80 (a : Prop), a \xe2\x88\xa7 false \xe2\x86\x94 false"},{"source":{"column":8,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/group.lean","line":226},"text":"add_assoc","type":"\xe2\x88\x80 (a b c : ?\xce\xb1), a + b + c = a + (b + c)"},{"doc":"Gadget for automatic parameter support. This is similar to the opt_param gadget, but it uses\\n   the tactic declaration names tac_name to synthesize the argument.\\n   Like opt_param, this gadget only affects elaboration.\\n   For example, the tactic will *not* be invoked during type class resolution.","source":{"column":17,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/name.lean","line":19},"text":"auto_param","type":"Sort u \xe2\x86\x92 name \xe2\x86\x92 Sort u"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/group.lean","line":198},"text":"add_monoid","type":"Type u \xe2\x86\x92 Type u"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/ordered_group.lean","line":66},"text":"add_lt_add","type":"?a < ?b \xe2\x86\x92 ?c < ?d \xe2\x86\x92 ?a + ?c < ?b + ?d"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/ordered_group.lean","line":104},"text":"add_nonpos","type":"?a \xe2\x89\xa4 0 \xe2\x86\x92 ?b \xe2\x89\xa4 0 \xe2\x86\x92 ?a + ?b \xe2\x89\xa4 0"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/ordered_group.lean","line":92},"text":"add_nonneg","type":"0 \xe2\x89\xa4 ?a \xe2\x86\x92 0 \xe2\x89\xa4 ?b \xe2\x86\x92 0 \xe2\x89\xa4 ?a + ?b"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/functions.lean","line":196},"text":"abs_of_pos","type":"?a > 0 \xe2\x86\x92 abs ?a = ?a"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/functions.lean","line":237},"text":"abs_nonneg","type":"\xe2\x88\x80 (a : ?\xce\xb1), abs a \xe2\x89\xa5 0"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/ordered_field.lean","line":276},"text":"add_halves","type":"\xe2\x88\x80 (a : ?\xce\xb1), a / 2 + a / 2 = a"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/functions.lean","line":203},"text":"abs_of_neg","type":"?a < 0 \xe2\x86\x92 abs ?a = -?a"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/functions.lean","line":338},"text":"abs_sub_le","type":"\xe2\x88\x80 (a b c : ?\xce\xb1), abs (a - c) \xe2\x89\xa4 abs (a - b) + abs (b - c)"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/ordered_group.lean","line":55},"text":"add_le_add","type":"?a \xe2\x89\xa4 ?b \xe2\x86\x92 ?c \xe2\x89\xa4 ?d \xe2\x86\x92 ?a + ?c \xe2\x89\xa4 ?b + ?d"},{"source":{"column":4,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/logic.lean","line":1070},"text":"associative","type":"(?\xce\xb1 \xe2\x86\x92 ?\xce\xb1 \xe2\x86\x92 ?\xce\xb1) \xe2\x86\x92 Prop"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/category/alternative.lean","line":15},"text":"alternative","type":"(Type u \xe2\x86\x92 Type v) \xe2\x86\x92 Type (max (u+1) v)"},{"source":{"column":4,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/logic.lean","line":372},"text":"and_implies","type":"(?a \xe2\x86\x92 ?c) \xe2\x86\x92 (?b \xe2\x86\x92 ?d) \xe2\x86\x92 ?a \xe2\x88\xa7 ?b \xe2\x86\x92 ?c \xe2\x88\xa7 ?d"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/functions.lean","line":481},"text":"abs_one_div","type":"\xe2\x88\x80 (a : ?\xce\xb1), abs (1 / a) = 1 / abs a"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/category/applicative.lean","line":31},"text":"applicative","type":"(Type u \xe2\x86\x92 Type v) \xe2\x86\x92 Type (max (u+1) v)"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/category/state.lean","line":159},"text":"adapt_state","type":"(?\xcf\x83\' \xe2\x86\x92 ?\xcf\x83 \xc3\x97 ?\xcf\x83\'\') \xe2\x86\x92 (?\xcf\x83 \xe2\x86\x92 ?\xcf\x83\'\' \xe2\x86\x92 ?\xcf\x83\') \xe2\x86\x92 ?m ?\xce\xb1 \xe2\x86\x92 ?m\' ?\xce\xb1"},{"source":{"column":14,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/logic.lean","line":418},"text":"and_not_self","type":"\xe2\x88\x80 (a : Prop), a \xe2\x88\xa7 \xc2\xaca \xe2\x86\x94 false"},{"source":{"column":4,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/group.lean","line":314},"text":"add_neg_self","type":"\xe2\x88\x80 (a : ?\xce\xb1), a + -a = 0"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/category/reader.lean","line":106},"text":"adapt_reader","type":"(?\xcf\x81\' \xe2\x86\x92 ?\xcf\x81) \xe2\x86\x92 ?m ?\xce\xb1 \xe2\x86\x92 ?m\' ?\xce\xb1"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/functions.lean","line":268},"text":"abs_by_cases","type":"\xe2\x88\x80 (P : ?\xce\xb1 \xe2\x86\x92 Prop) {a : ?\xce\xb1}, P a \xe2\x86\x92 P (-a) \xe2\x86\x92 P (abs a)"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/cc_lemmas.lean","line":31},"text":"and_eq_of_eq","type":"?a = ?b \xe2\x86\x92 (?a \xe2\x88\xa7 ?b) = ?a"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/category/except.lean","line":129},"text":"adapt_except","type":"(?\xce\xb5 \xe2\x86\x92 ?\xce\xb5\') \xe2\x86\x92 ?m ?\xce\xb1 \xe2\x86\x92 ?m\' ?\xce\xb1"},{"source":{"column":8,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/group.lean","line":226},"text":"add_left_neg","type":"\xe2\x88\x80 (a : ?\xce\xb1), -a + a = 0"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/functions.lean","line":408},"text":"abs_mul_self","type":"\xe2\x88\x80 (a : ?\xce\xb1), abs (a * a) = a * a"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/logic.lean","line":397},"text":"and_iff_left","type":"?b \xe2\x86\x92 (?a \xe2\x88\xa7 ?b \xe2\x86\x94 ?a)"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/group.lean","line":424},"text":"add_sub_comm","type":"\xe2\x88\x80 (a b c d : ?\xce\xb1), a + b - (c + d) = a - c + (b - d)"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/ordered_field.lean","line":283},"text":"add_midpoint","type":"?a < ?b \xe2\x86\x92 ?a + (?b - ?a) / 2 < ?b"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/group.lean","line":186},"text":"add_semigroup","type":"Type u \xe2\x86\x92 Type u"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/functions.lean","line":192},"text":"abs_of_nonneg","type":"?a \xe2\x89\xa5 0 \xe2\x86\x92 abs ?a = ?a"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/functions.lean","line":199},"text":"abs_of_nonpos","type":"?a \xe2\x89\xa4 0 \xe2\x86\x92 abs ?a = -?a"},{"source":{"column":14,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/name.lean","line":22},"text":"auto_param_eq","type":"\xe2\x88\x80 (\xce\xb1 : Sort u) (n : name), auto_param \xce\xb1 n = \xce\xb1"},{"source":{"column":8,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/group.lean","line":226},"text":"add_left_comm","type":"\xe2\x88\x80 (a b c : ?\xce\xb1), a + (b + c) = b + (a + c)"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/group.lean","line":337},"text":"add_sub_assoc","type":"\xe2\x88\x80 (a b c : ?\xce\xb1), a + b - c = a + (b - c)"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/functions.lean","line":344},"text":"abs_add_three","type":"\xe2\x88\x80 (a b c : ?\xce\xb1), abs (a + b + c) \xe2\x89\xa4 abs a + abs b + abs c"},{"source":{"column":8,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/group.lean","line":226},"text":"add_right_neg","type":"\xe2\x88\x80 (a : ?\xce\xb1), a + -a = 0"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/logic.lean","line":400},"text":"and_iff_right","type":"?a \xe2\x86\x92 (?a \xe2\x88\xa7 ?b \xe2\x86\x94 ?b)"},{"source":{"column":8,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/group.lean","line":226},"text":"add_right_comm","type":"\xe2\x88\x80 (a b c : ?\xce\xb1), a + b + c = a + c + b"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/functions.lean","line":212},"text":"abs_pos_of_pos","type":"?a > 0 \xe2\x86\x92 abs ?a > 0"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/group.lean","line":334},"text":"add_sub_cancel","type":"\xe2\x88\x80 (a b : ?\xce\xb1), a + b - b = a"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/group.lean","line":206},"text":"add_comm_group","type":"Type u \xe2\x86\x92 Type u"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/functions.lean","line":215},"text":"abs_pos_of_neg","type":"?a < 0 \xe2\x86\x92 abs ?a > 0"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/functions.lean","line":438},"text":"abs_sub_square","type":"\xe2\x88\x80 (a b : ?\xce\xb1), abs (a - b) * abs (a - b) = a * a + b * b - (1 + 1) * a * b"},{"source":{"column":4,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/logic.lean","line":1039},"text":"anti_symmetric","type":"(?\xce\xb2 \xe2\x86\x92 ?\xce\xb2 \xe2\x86\x92 Prop) \xe2\x86\x92 Prop"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/group.lean","line":201},"text":"add_comm_monoid","type":"Type u \xe2\x86\x92 Type u"},{"source":{"column":8,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/ring.lean","line":235},"text":"add_mul_self_eq","type":"\xe2\x88\x80 (a b : ?\xce\xb1), (a + b) * (a + b) = a * a + 2 * a * b + b * b"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/ordered_group.lean","line":38},"text":"add_lt_add_left","type":"?a < ?b \xe2\x86\x92 \xe2\x88\x80 (c : ?\xce\xb1), c + ?a < c + ?b"},{"doc":"Copy a list of meta definitions in the current namespace to tactic.interactive.\\n\\nThis command is useful when we want to update tactic.interactive without closing the current namespace.","source":{"column":9,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/meta/interactive.lean","line":1630},"text":"add_interactive","type":"list name \xe2\x86\x92 opt_param name (name.mk_string \\"interactive\\" (name.mk_string \\"tactic\\" name.anonymous)) \xe2\x86\x92 tactic unit"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/ordered_group.lean","line":27},"text":"add_le_add_left","type":"?a \xe2\x89\xa4 ?b \xe2\x86\x92 \xe2\x88\x80 (c : ?\xce\xb1), c + ?a \xe2\x89\xa4 c + ?b"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/logic.lean","line":377},"text":"and_congr_right","type":"(?a \xe2\x86\x92 (?b \xe2\x86\x94 ?c)) \xe2\x86\x92 (?a \xe2\x88\xa7 ?b \xe2\x86\x94 ?a \xe2\x88\xa7 ?c)"},{"source":{"column":8,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/group.lean","line":226},"text":"add_left_cancel","type":"?a + ?b = ?a + ?c \xe2\x86\x92 ?b = ?c"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/ordered_field.lean","line":295},"text":"add_self_div_two","type":"\xe2\x88\x80 (a : ?\xce\xb1), (a + a) / 2 = a"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/ordered_group.lean","line":46},"text":"add_le_add_right","type":"?a \xe2\x89\xa4 ?b \xe2\x86\x92 \xe2\x88\x80 (c : ?\xce\xb1), ?a + c \xe2\x89\xa4 ?b + c"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/ordered_group.lean","line":608},"text":"add_le_add_three","type":"?a \xe2\x89\xa4 ?d \xe2\x86\x92 ?b \xe2\x89\xa4 ?e \xe2\x86\x92 ?c \xe2\x89\xa4 ?f \xe2\x86\x92 ?a + ?b + ?c \xe2\x89\xa4 ?d + ?e + ?f"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/group.lean","line":388},"text":"add_eq_of_eq_sub","type":"?a = ?c - ?b \xe2\x86\x92 ?a + ?b = ?c"},{"source":{"column":8,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/group.lean","line":226},"text":"add_right_cancel","type":"?a + ?b = ?c + ?b \xe2\x86\x92 ?a = ?c"},{"source":{"column":8,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/ordered_group.lean","line":49},"text":"add_lt_add_right","type":"?a < ?b \xe2\x86\x92 \xe2\x88\x80 (c : ?\xce\xb1), ?a + c < ?b + c"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/functions.lean","line":405},"text":"abs_mul_abs_self","type":"\xe2\x88\x80 (a : ?\xce\xb1), abs a * abs a = a * a"},{"source":{"column":9,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/group.lean","line":321},"text":"add_group_has_sub","type":"has_sub ?\xce\xb1"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/group.lean","line":418},"text":"add_eq_of_eq_sub\'","type":"?b = ?c - ?a \xe2\x86\x92 ?a + ?b = ?c"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/functions.lean","line":265},"text":"abs_pos_of_ne_zero","type":"?a \xe2\x89\xa0 0 \xe2\x86\x92 abs ?a > 0"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/group.lean","line":189},"text":"add_comm_semigroup","type":"Type u \xe2\x86\x92 Type u"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/ordered_group.lean","line":157},"text":"add_lt_of_le_of_neg","type":"?b \xe2\x89\xa4 ?c \xe2\x86\x92 ?a < 0 \xe2\x86\x92 ?b + ?a < ?c"},{"source":{"column":6,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/ordered_group.lean","line":181},"text":"add_lt_of_lt_of_neg","type":"?b < ?c \xe2\x86\x92 ?a < 0 \xe2\x86\x92 ?b + ?a < ?c"},{"source":{"column":8,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/group.lean","line":226},"text":"add_left_cancel_iff","type":"?a + ?b = ?a + ?c \xe2\x86\x94 ?b = ?c"},{"source":{"column":8,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/algebra/group.lean","line":226},"text":"add_neg_cancel_left","type":"\xe2\x88\x80 (a b : ?\xce\xb1), a + (-a + b) = b"},{"source":{"column":10,"file":"/Users/jasonrute/.elan/toolchains/leanprover-community-lean-3.9.0/lib/lean/library/init/wf.lean","line":11},"text":"acc.cases_on","type":"acc ?r ?a \xe2\x86\x92 (\xce\xa0 (x : ?\xce\xb1), (\xce\xa0 (y : ?\xce\xb1), ?r y x \xe2\x86\x92 acc ?r y) \xe2\x86\x92 ?C x) \xe2\x86\x92 ?C ?a"}],"seq_num":20}',
                response_type=cmds.SearchResponse,
                replacement_keys={'type': 'type_'}
            )

    class TestRoiResponse:
        def test_response(self):
            TestCommandResponse.run_tests(
                response_json='{"response":"ok","seq_num":23}',
                response_type=cmds.RoiResponse
            )
